extends:
  ## The rules added by standard/standard are shown as comments below
  - standard
  - plugin:you-dont-need-lodash-underscore/all
  ## The rules disabled by eslint-config-prettier are shown as comments below
  - prettier
  - prettier/standard

parserOptions:
  sourceType: module
## Added by standard/standard
#  ecmaVersion: 2020
#  ecmaFeatures:
#    jsx: true

## Added by standard/standard
#env:
#  node: true
#  es6: true

## Added by standard/standard
#globals:
#  document: readonly
#  navigator: readonly
#  window: readonly

plugins:
  - eslint-comments
  - filenames
  - fp
  - html
  - markdown
  - unicorn
  - eslint-plugin-ava
## Added by standard/standard
#  - import
#  - node
#  - promise
#  - standard

rules:
  ## Globals
  node/prefer-global/console: 2
  node/prefer-global/url-search-params: 2
  node/prefer-global/text-decoder: 2
  node/prefer-global/text-encoder: 2
  # TODO: uncomment after dropping Node.js 9 support
  # node/prefer-global/url: 2
  node/prefer-global/url:
    - 2
    - never
  ## We only use globals for globals also defined in the browser
  node/prefer-global/buffer:
    - 2
    - never
  node/prefer-global/process:
    - 2
    - never

  ## Comments
  no-inline-comments: 2
  multiline-comment-style:
    - 2
    - separate-lines
  line-comment-position: 2

  ## ESLint comments
  eslint-comments/disable-enable-pair: 2
  eslint-comments/no-unused-enable: 2
  eslint-comments/no-unused-disable: 2
  eslint-comments/no-duplicate-disable: 2
  eslint-comments/no-unlimited-disable: 2
  eslint-comments/no-aggregating-enable: 2
  eslint-comments/no-use:
    - 2
    - allow:
        - eslint-disable-next-line
        - eslint-disable
        - eslint-enable
        - eslint-env
  unicorn/no-abusive-eslint-disable: 2

  ## Strictness
  strict: 2

  ## Blank lines
  padding-line-between-statements:
    - 2
    - blankLine: always
      prev: [multiline-block-like, directive]
      next: '*'
    - blankLine: always
      prev: '*'
      next: multiline-block-like

  ## Statements
  no-empty:
    - 2
    - allowEmptyCatch: true

  ## Complexity
  max-len:
    - 2
    - code: 80
      tabWidth: 2
      ignoreUrls: true
      ignoreStrings: true
      ignoreTemplateLiterals: true
      ignoreRegExpLiterals: true
      ignorePattern: eslint-disable
  max-lines:
    - 2
    - max: 90
      skipBlankLines: true
      skipComments: true
  max-lines-per-function:
    - 2
    - max: 50
      skipBlankLines: true
      skipComments: true
      IIFEs: true
  max-statements:
    - 2
    - 10
  max-statements-per-line:
    - 2
    - max: 2
  import/max-dependencies: 2
  complexity:
    - 2
    - 4
  max-depth:
    - 2
    - 1
  max-nested-callbacks:
    - 2
    - 1

  ## Referencing
  unicorn/no-unused-properties: 2
  no-shadow:
    - 2
    - builtinGlobals: true
      hoist: all
      allow:
        - process
        - Buffer
        # TODO: uncomment after dropping Node.js 9 support
        - URL

  ## Declarations
  block-scoped-var: 2
  no-var: 2
  fp/no-let: 2
  import/no-mutable-exports: 2
  no-implicit-globals: 2
  vars-on-top: 2
  sort-vars: 2
  no-magic-numbers:
    - 2
    - ignore: [-2, -1, 0, 1, 2, 3, 10]
      enforceConst: true

  ## Assignments
  init-declarations: 2
  no-plusplus: 2
  operator-assignment: 2
  no-multi-assign: 2
  prefer-object-spread: 2
  no-param-reassign:
    - 2
    - props: true
  fp/no-mutation:
    - 2
    - commonjs: true
  fp/no-delete: 2
  import/no-unassigned-import: 2
  fp/no-mutating-assign: 2
  fp/no-mutating-methods: 2

  ## Naming
  id-length:
    - 2
    - max: 24
      exceptions:
        # ava requires `test` to be called `t` for `power-assert` to work
        - t
        # Returned by yargs
        - _
  id-match:
    - 2
    - ^[A-Za-z0-9_]+$
    - onlyDeclarations: true
  no-underscore-dangle:
    - 2
    - enforceInMethodNames: true
      # Often used in several libraries
      allow: [_id]

  ## Typecasting
  no-implicit-coercion: 2
  unicorn/explicit-length-check:
    - 2
    - non-zero: not-equal
  unicorn/new-for-builtins: 2
  fp/no-valueof-field: 2

  ## Tests
  unicorn/no-array-instanceof: 2
  no-negated-condition: 2
  no-nested-ternary: 2

  ## Structures
  no-lonely-if: 2
  no-else-return:
    - 2
    - allowElseIf: false
  for-direction: 2
  unicorn/no-for-loop: 2
  guard-for-in: 2
  fp/no-loops: 2

  ## Switch
  no-restricted-syntax:
    - 2
    - SwitchStatement
    # This is added by eslint-config-prettier, so we keep it
    - selector: SequenceExpression
      message:
        The comma operator is confusing and a common mistake. Donâ€™t use it!
  default-case: 2

  ## Labels
  no-unused-labels: 2
  no-extra-label: 2
  no-label-var: 2

  ## Exceptions
  unicorn/throw-new-error: 2
  unicorn/error-message: 2
  unicorn/catch-error-name: 2
  unicorn/prefer-type-error: 2
  unicorn/custom-error-definition: 2

  ## Functions
  func-style: 2
  no-loop-func: 2
  func-names:
    - 2
    - as-needed
  func-name-matching:
    - 2
    - considerPropertyDescriptor: true
  max-params: 2
  prefer-spread: 2
  unicorn/prefer-spread: 2
  prefer-rest-params: 2
  fp/no-arguments: 2
  require-yield: 2
  getter-return: 2
  fp/no-get-set: 2
  fp/no-proxy: 2
  no-empty-function: 2

  ## Objects
  object-shorthand: 2
  prefer-destructuring: 2

  ## Inheritance
  no-invalid-this: 2
  class-methods-use-this: 2
  consistent-this: 2
  max-classes-per-file: 0
  fp/no-class: 2
  fp/no-this: 2

  ## Arrays
  array-callback-return: 2
  unicorn/prefer-includes: 2
  unicorn/prefer-flat-map: 2

  ## String
  no-useless-concat: 2
  prefer-template: 2
  unicorn/prefer-starts-ends-with: 2
  unicorn/no-hex-escape: 2
  unicorn/escape-case: 2
  unicorn/no-console-spaces: 2

  ## RegExps
  unicorn/regex-shorthand: 2
  require-unicode-regexp: 2

  ## Number
  unicorn/no-zero-fractions: 2
  prefer-numeric-literals: 2
  radix:
    - 2
    - as-needed
  unicorn/prefer-exponentiation-operator: 2
  no-bitwise: 2

  ## Async
  callback-return: 2
  node/no-callback-literal: 2
  require-await: 2
  no-await-in-loop: 2
  require-atomic-updates: 2
  no-sync: 2
  promise/catch-or-return: 2
  promise/always-return: 2
  promise/valid-params: 2
  promise/no-new-statics: 2
  promise/no-return-wrap: 2
  promise/no-return-in-finally: 2
  promise/no-nesting: 2
  promise/no-promise-in-callback: 2
  promise/no-callback-in-promise: 2
  promise/avoid-new: 2
  promise/prefer-await-to-then: 2
  promise/prefer-await-to-callbacks: 2

  ## Modules
  import/no-unresolved:
    - 2
    - commonjs: true
  node/no-missing-require: 2
  node/no-unpublished-require: 2
  node/no-missing-import: 2
  node/no-unpublished-import: 2
  # TODO: there are two bugs that make this rule hard to work with at the moment
  #  - https://github.com/microsoft/vscode-eslint/issues/717
  #  - when renaming a file, an error popup shows up in VSCode
  # import/no-unused-modules:
  #   - 2
  #   - unusedExports: true
  #     missingExports: true
  #     # We need to use globbing `{,}` instead of an array because non-existing
  #     # directories are reported otherwise.
  #     # We need to add all directories that are ignored, because while
  #     # `ignoreExports` ensures they don't have to export something, they might
  #     # still import other files. E.g. some files exported in `src` might be
  #     # imported only in tests.
  #     # We use `README.md` as a catch-all for repositories without a `src`.
  #     src:
  #       - '{README.md,src/**/*.js,ava.config.js,examples/**/*.js,test/**/*.js,benchmarks/**/*.js,register/**/*.js,gulp/**/*.js,gulpfile.js}'
  #     # Excludes:
  #     #   - documentation/examples/benchmarks might not export anything
  #     #   - tests and register files are side-effects-only, i.e. do not
  #     #     export anything
  #     #   - custom Gulp tasks use ES modules but gulpfile.js uses CommonJS,
  #     #     so this rule cannot be used between them
  #     #   - entry points
  #     ignoreExports:
  #       - '{ava.config.js,*.md,**/*.md,examples/**/*.js,test/**/*.js,benchmarks/**/*.js,register/**/*.js,gulp/**/*.js,gulpfile.js,src/main.js,src/bin/main.js,src/bin.js}'
  import/named: 2
  import/namespace:
    - 2
    - allowComputed: true
  import/no-named-as-default: 2
  import/no-named-as-default-member: 2
  import/no-namespace: 2
  import/no-named-default: 2
  import/no-anonymous-default-export: 2
  import/no-default-export: 2
  node/exports-style:
    - 2
    - module.exports
  import/extensions:
    - 2
    - always
    - ignorePackages: true
  node/file-extension-in-import: 2
  import/no-useless-path-segments: 2
  no-duplicate-imports:
    - 2
    - includeExports: true
  import/no-self-import: 2
  import/no-cycle:
    - 2
    - commonjs: true
  import/no-extraneous-dependencies:
    - 2
    - devDependencies: [test/**, gulp/**, benchmarks/**, gulpfile.js]
  node/no-extraneous-require: 2
  node/no-extraneous-import: 2
  sort-imports:
    - 2
    - ignoreMemberSort: true
      ignoreDeclarationSort: true
  no-mixed-requires: 2
  import/order:
    - 2
    - newlines-between: always
  import/newline-after-import: 2
  import/unambiguous: 2
  global-require: 2
  import/no-dynamic-require: 2
  import/no-commonjs: 2
  import/no-amd: 2
  import/no-deprecated: 2

  ## Filenames
  filenames/match-regex:
    - 2
    - ^[a-zA-Z_][a-zA-Z0-9_.]+$
  filenames/match-exported:
    - 2
    - snake
  filenames/no-index: 2
  unicorn/filename-case:
    - 2
    - case: snakeCase

  ## Binary
  node/no-unpublished-bin: 2

  ## Blacklist
  ## Avoid Node.js-specific global variables
  no-restricted-globals:
    - 2
    ## No global variables
    - global
    - GLOBAL
    ## Use console wrapper instead
    - console
    ## Use module.exports instead
    - exports
    ## Use require('process|buffer') instead
    - process
    - Buffer
  # Prefer `if` + `throw new Error()` instead of `assert()` as it does not
  # work in browsers
  no-restricted-imports:
    - 2
    - paths: [assert]
  no-restricted-modules:
    - 2
    - paths: [assert]
  # Using object destructuring is not a good solution
  you-dont-need-lodash-underscore/omit: 0

  ## To avoid
  no-continue: 2
  no-console: 2
  fp/no-events: 2
  no-buffer-constructor: 2
  unicorn/no-new-buffer: 2
  no-process-env: 2
  no-script-url: 2
  no-alert: 2
  unicorn/prefer-add-event-listener: 2
  no-process-exit: 2
  unicorn/no-process-exit: 2

  ## DOM
  unicorn/prefer-query-selector: 2
  unicorn/prefer-node-append: 2
  unicorn/prefer-node-remove: 2
  unicorn/prefer-text-content: 2
  unicorn/prefer-event-key: 2

  # AVA
  ava/no-unknown-modifiers: 2
  ava/use-t-well: 2
  ava/no-todo-implementation: 2
  ava/no-nested-tests: 2
  ava/no-duplicate-modifiers: 2
  ava/assertion-arguments: 2
  ava/no-cb-test: 2
  ava/test-ended: 2
  ava/no-invalid-end: 2
  ava/no-statement-after-end: 2
  ava/test-title: 2
  ava/no-identical-title: 2
  ava/no-ignored-test-files:
    - 2
    - files: [test/**/*.js]
      helpers: [test/helpers/**/*.js]
  ava/no-import-test-files:
    - 2
    - files: [test/**/*.js]
      helpers: [test/helpers/**/*.js]
  ava/no-only-test: 2
  ava/no-skip-test: 2
  ava/no-skip-assert: 2
  ava/no-todo-test: 2
  ava/use-true-false: 2
  ava/prefer-t-regex: 2
  ava/hooks-order: 2
  ava/no-inline-assertions: 2
  ava/max-asserts: [2, 5]
  ava/no-incorrect-deep-equal: 2
  ava/use-t: 2
  ava/use-test: 2
  ava/prefer-async-await: 2
  ava/no-async-fn-without-await: 2

  ## Differences from standard/standard

  ## standard/standard does not check arguments for unused-vars
  no-unused-vars:
    - 2
    - {}
  ## standard/standard does not check `typeof`
  no-undef:
    - 2
    - typeof: true

## Added by standard/standard

#  accessor-pairs: 2
#  array-bracket-spacing: 0
#  camelcase:
#    - 2
#    - properties: never
#  constructor-super: 2
#  dot-notation: 2
#  eqeqeq:
#    - 2
#    - always
#    - 'null': ignore
#  handle-callback-err:
#    - 2
#    - '^(err|2)$'
#  lines-between-class-members:
#    - 2
#    - always
#    - exceptAfterSingleLine: true
#  new-cap:
#    - 2
#    - capIsNew: false
#  no-array-constructor: 2
#  no-async-promise-executor: 2
#  no-caller: 2
#  no-case-declarations: 2
#  no-class-assign: 2
#  no-compare-neg-zero: 2
#  no-cond-assign: 2
#  no-const-assign: 2
#  no-constant-condition:
#    - 2
#    - checkLoops: false
#  no-control-regex: 2
#  no-debugger: 2
#  no-delete-var: 2
#  no-dupe-args: 2
#  no-dupe-class-members: 2
#  no-dupe-keys: 2
#  no-duplicate-case: 2
#  no-empty-character-class: 2
#  no-empty-pattern: 2
#  no-eval: 2
#  no-ex-assign: 2
#  no-extend-native: 2
#  no-extra-bind: 2
#  no-extra-boolean-cast: 2
#  no-fallthrough: 2
#  no-func-assign: 2
#  no-global-assign: 2
#  no-implied-eval: 2
#  no-inner-declarations:
#    - 2
#    - functions
#  no-invalid-regexp: 2
#  no-irregular-whitespace: 2
#  no-iterator: 2
#  no-labels:
#    - 2
#    - allowLoop: false
#      allowSwitch: false
#  no-lone-blocks: 2
#  no-misleading-character-class: 2
#  no-multi-str: 2
#  no-negated-in-lhs: 2
#  no-new: 2
#  no-new-func: 2
#  no-new-object: 2
#  no-new-require: 2
#  no-new-symbol: 2
#  no-new-wrappers: 2
#  no-obj-calls: 2
#  no-octal: 2
#  no-octal-escape: 2
#  no-path-concat: 2
#  no-proto: 2
#  no-prototype-builtins: 2
#  no-redeclare:
#    - 2
#    - builtinGlobals: false
#  no-regex-spaces: 2
#  no-return-assign:
#    - 2
#    - except-parens
#  no-return-await: 2
#  no-self-assign: 2
#  no-self-compare: 2
#  no-sequences: 2
#  no-shadow-restricted-names: 2
#  no-sparse-arrays: 2
#  no-tabs: 2
#  no-template-curly-in-string: 2
#  no-this-before-super: 2
#  no-throw-literal: 2
#  no-undef-init: 2
#  no-unmodified-loop-condition: 2
#  no-unneeded-ternary:
#    - 2
#    - defaultAssignment: false
#  no-unreachable: 2
#  no-unsafe-finally: 2
#  no-unsafe-negation: 2
#  no-unused-expressions:
#    - 2
#    - allowShortCircuit: true
#      allowTernary: true
#      allowTaggedTemplates: true
#  no-use-before-define:
#    - 2
#    - functions: false
#      classes: false
#      variables: false
#  no-useless-call: 2
#  no-useless-catch: 2
#  no-useless-computed-key: 2
#  no-useless-constructor: 2
#  no-useless-escape: 2
#  no-useless-rename: 2
#  no-useless-return: 2
#  no-void: 2
#  no-with: 2
#  one-var:
#    - 2
#    - initialized: never
#  prefer-const:
#    - 2
#    - destructuring: all
#  prefer-promise-reject-2s: 2
#  quotes:
#    - 2
#    - single
#    - avoidEscape: true
#      allowTemplateLiterals: false
#  spaced-comment:
#    - 2
#    - always
#    - line:
#        markers:
#          - '*package'
#          - '!'
#          - '/'
#          - ','
#          - '='
#      block:
#        balanced: true
#        markers:
#          - '*package'
#          - '!'
#          - ','
#          - ':'
#          - '::'
#          - flow-include
#        exceptions:
#          - '*'
#  symbol-description: 2
#  use-isnan: 2
#  valid-typeof:
#    - 2
#    - requireStringLiterals: true
#  yoda:
#    - 2
#    - never
#  import/export: 2
#  import/first: 2
#  import/no-absolute-path: 2
#  import/no-duplicates: 2
#  import/no-webpack-loader-syntax: 2
#  node/no-deprecated-api: 2
#  node/process-exit-as-throw: 2
#  promise/param-names: 2
#  standard/no-callback-literal: 2

## Might conflict with Prettier, i.e. disabled by eslint-config-prettier,
## but overriden by us.

#  max-len: 0
#  no-tabs: 0
#  quotes: 0

## Conflicts with Prettier, i.e. disabled by eslint-config-prettier,
## although added by standard/standard.

#  curly:
#    - 2
#    - multi-line
#  no-mixed-operators:
#    - 2
#    - groups:
#        - - '=='
#          - '!='
#          - '==='
#          - '!=='
#          - '>'
#          - '>='
#          - '<'
#          - '<='
#        - - '&&'
#          - '||'
#        - - in
#          - instanceof
#      allowSamePrecedence: true
#  no-unexpected-multiline: 2
#  arrow-spacing:
#    - 2
#    - before: true
#      after: true
#  block-spacing:
#    - 2
#    - always
#  brace-style:
#    - 2
#    - 1tbs
#    - allowSingleLine: true
#  comma-dangle:
#    - 2
#    - arrays: never
#      objects: never
#      imports: never
#      exports: never
#      functions: never
#  comma-spacing:
#    - 2
#    - before: false
#      after: true
#  comma-style:
#    - 2
#    - last
#  computed-property-spacing: 2
#  dot-location:
#    - 2
#    - property
#  eol-last: 2
#  func-call-spacing:
#    - 2
#    - never
#  generator-star-spacing:
#    - 2
#    - before: true
#      after: true
#  indent:
#    - 2
#    - 2
#    - SwitchCase: 1
#      VariableDeclarator: 1
#      outerIIFEBody: 1
#      MemberExpression: 1
#      FunctionDeclaration:
#        parameters: 1
#        body: 1
#      FunctionExpression:
#        parameters: 1
#        body: 1
#      CallExpression:
#        arguments: 1
#      ArrayExpression: 1
#      ObjectExpression: 1
#      ImportDeclaration: 1
#      flatTernaryExpressions: false
#      ignoreComments: false
#      ignoredNodes:
#       - TemplateLiteral *
#  key-spacing:
#    - 2
#    - beforeColon: false
#      afterColon: true
#  keyword-spacing:
#    - 2
#    - before: true
#      after: true
#  new-parens: 2
#  no-extra-parens:
#    - 2
#    - functions
#  no-floating-decimal: 2
#  no-mixed-spaces-and-tabs: 2
#  no-multi-spaces: 2
#  no-multiple-empty-lines:
#    - 2
#    - max: 1
#      maxEOF: 0
#  no-trailing-spaces: 2
#  no-whitespace-before-property: 2
#  object-curly-newline:
#    - 2
#    - multiline: true
#  object-curly-spacing:
#    - 2
#    - always
#  object-property-newline:
#    - 2
#    - allowAllPropertiesOnSameLine: true
#  operator-linebreak:
#    - 2
#    - after
#    - overrides:
#        '?': before
#        ':': before
#        '|>': before
#  padded-blocks:
#    - 2
#    - blocks: never
#      switches: never
#      classes: never
#  quote-props:
#    - 2
#    - as-needed
#  rest-spread-spacing:
#    - 2
#    - never
#  semi:
#    - 2
#    - never
#  semi-spacing:
#    - 2
#    - before: false
#      after: true
#  space-before-blocks:
#    - 2
#    - always
#  space-before-function-paren:
#    - 2
#    - always
#  space-in-parens:
#    - 2
#    - never
#  space-infix-ops: 2
#  space-unary-ops:
#    - 2
#    - words: true
#      nonwords: false
#  template-curly-spacing:
#    - 2
#    - never
#  template-tag-spacing:
#    - 2
#    - never
#  unicode-bom:
#    - 2
#    - never
#  wrap-iife:
#    - 2
#    - any
#    - functionPrototypeMethods: true
#  yield-star-spacing:
#    - 2
#    - both

## Conclits with Prettier, i.e. disabled by eslint-config-prettier,
## otherwise we would add it (using those commented lines).

#  array-bracket-newline:
#    - 2
#    - consistent
#  array-element-newline: 2
#  arrow-body-style: 2
#  arrow-parens:
#    - 2
#    - as-needed
#  function-paren-newline: 2
#  function-call-argument-newline:
#    - 2
#    - consistent
#  implicit-arrow-linebreak: 2
#  jsx-quotes: 2
#  linebreak-style: 2
#  lines-around-comment: 2
#  multiline-ternary: 2
#  newline-per-chained-call: 2
#  no-confusing-arrow: 2
#  no-extra-semi: 2
#  nonblock-statement-body-position: 2
#  one-var-declaration-per-line: 2
#  prefer-arrow-callback:
#    - 2
#    - allowNamedFunctions: true
#  semi-style: 2
#  switch-colon-spacing: 2
#  wrap-regex: 2
#  unicorn/number-literal-case: 2

## The only difference from pure functional programming is that we
## allow exceptions to avoid cumbersome code

#  fp/no-throw: 2

## Those rules should be picked for a fully functional codebase.
## However, we want to allow throwing exceptions, because monads would
## be too verbose.

#  fp/no-nil: 2
#  no-undefined: 2
#  fp/no-unused-expression:
#  - 2
#  - allowUseStrict: true
#  consistent-return: 2

## This does not work with the way we import files

#  import/no-internal-modules: 2

## This is too restrictive

#  unicorn/no-unsafe-regex: 2
#  import/no-relative-parent-imports: 2

## This makes RegExps more verbose

#  prefer-named-capture-group: 2

## Not supported by Node <11.4.0, and no polyfill available

#  node/prefer-promises/fs: 2
#  node/prefer-promises/dns: 2

## This is in conflict with no-useless-escape rule

#  no-div-regex: 2

## This makes commenting/uncommenting code tedious

#  capitalized-comments:
#    - 2
#    - always
#    - ignoreConsecutiveComments: true

## This does not match our import/export style

#  import/no-named-export: 0
#  import/prefer-default-export: 0
#  import/group-exports: 0
#  import/exports-last: 0
#  import/default: 0
#  unicorn/import-index: 0

## We sort object keys by type, not by name

#  sort-keys: 2

## We want rest parameters to allow passing around arguments unchanged

#  fp/no-rest-parameters: 2

## We allow ternaries, they can make code look cleaner

#  no-ternary: 2

## We allow TODO comments

#  no-warning-comments: 2

## We are symlinking shebang files so that they have the correct file extension

#  node/shebang: 2

## We want to allow Promise.all() and Promise.race()

#  promise/no-native: 2

## This rule encourages creating functions where it is not needed

#  unicorn/no-fn-reference-in-iterator: 2

## It conflicts with `prefer-destructuring` rule

# unicorn/no-unreadable-array-destructuring: 2

## This rule should be turned on in the future

#  valid-jsdoc: 2
#  require-jsdoc:
#  - 2
#  - require:
#      FunctionDeclaration: true
#      MethodDefinition: true
#      ClassDeclaration: true

## This rule is too unstable for the moment:
##   https://github.com/sindresorhus/eslint-plugin-unicorn/issues/269
##   https://github.com/sindresorhus/eslint-plugin-unicorn/issues/270

#  unicorn/prevent-abbreviations:
#   - 2
#   - checkDefaultAndNamespaceImports: true
#     checkShorthandImports: true
#     checkShorthandProperties: true
#     replacements:
#       # `arguments` is a reserved word in JavaScript
#       arg: false
#       args: false
#       # Used in `process.env`
#       env: false
#       # This prevents prefixing methods with `e`, which is a convention we
#       # use for error handlers
#       e: false
#       # This is too common
#       prop: false
#       props: false

## This rule is too cumbersome:

#  unicorn/no-keyword-prefix: 2

## Does not work when transpiling with Babel

#  node/no-unsupported-features/es-syntax: 2
#  node/no-unsupported-features/es-builtins: 2
#  node/no-unsupported-features/node-builtins: 2

## Do not use Power assert directly

#  ava/prefer-power-assert: 2

## Test titles do not follow any format

# ava/test-title-format: 2

## Rules for client-side code only

#  import/no-nodejs-modules: 2

## React

#  react/*: 2

## No use for those rules

#  id-blacklist: 2
#  no-restricted-properties: 2
#  import/no-restricted-paths: 2

settings:
  # JSON files in `build` are compiled from YAML in `src` and `test`
  node:
    tryExtensions: [.js, .json, .node, .yml, .yaml]
  import/resolver:
    node:
      extensions: [.js, .json, .node, .yml, .yaml]

overrides:
  # Examples and documentation files
  - files: ['*.md', '**/*.md', examples/**/*.js]
    # Most Node.js users still use CommonJS, so we document it as such
    parserOptions:
      sourceType: script
    rules:
      import/no-commonjs: 0

      # Examples print their output at the end of the file
      # It might happen in documentation as well
      no-console: 0
      no-restricted-globals: 0

      # Inline comments can be nicer in documentation
      # Examples usually include the return value as inline comments
      line-comment-position: 0
      no-inline-comments: 0

      # Inlining constants is simpler for examples
      no-magic-numbers: 0

      # Documentation often require the module itself.
      # Also documentation can require a module that does not exist.
      # Examples point to already built files which might not be created yet
      # if the user just cloned the repository
      import/no-unresolved: 0
      import/no-extraneous-dependencies: 0
      node/no-missing-require: 0
      node/no-extraneous-require: 0
      node/no-unpublished-require: 0

      # Using those globals is simpler in documentation
      node/prefer-global/buffer: 0
      node/prefer-global/process: 0
      node/prefer-global/url: 0

      # Example test files
      ava/no-ignored-test-files: 0

  # Markdown files
  - files: ['*.md', '**/*.md']
    # `use strict` is too verbose in documentation
    parserOptions:
      ecmaFeatures:
        impliedStrict: true
    rules:
      # We want to keep Markdown code examples short
      strict: 0
      import/newline-after-import: 0

      # Markdown filenames do not match code examples
      camelcase: 0
      filenames/match-exported: 0
      unicorn/filename-case: 0

      # Documentation code often misses context lines, leading to variables
      # looking unused or undefined
      no-undef: 0
      no-unused-vars: 0

  # Examples files
  - files: [examples/**/*.js]
    rules:
      # We import `util.js` in examples, which monkey patches `require()`
      import/no-unassigned-import: 0
      # We allow asserts as they are simple in examples
      no-restricted-imports:
        - 2
        - paths: []
      no-restricted-modules:
        - 2
        - paths: []

  # Test files
  - files: [test/**/*.js]
    rules:
      # When using data-driven testing, an extra level of depth is implied
      max-nested-callbacks:
        - 2
        - 2
      max-lines-per-function: 0

  # ava.config.js requires a default export
  - files: [ava.config.js]
    rules:
      filenames/match-exported: 0
      import/no-extraneous-dependencies: 0
      import/no-anonymous-default-export: 0
      import/no-default-export: 0

  # Gulpfile
  - files: [gulpfile.js]
    parserOptions:
      sourceType: script
    rules:
      import/no-commonjs: 0

  # Main entry point
  - files: [src/main.js]
    rules:
      # We do not use `export default` because Babel transpiles it in a way that
      # requires CommonJS users to `require(...).default` instead of
      # `require(...)`.
      import/no-commonjs: 0
      filenames/match-exported: 0

  # CLI
  - files: [src/bin/**/*.js, src/bin.js]
    rules:
      # CLI often prints to console
      no-console: 0
      no-restricted-globals:
        - 2
        - global
        - GLOBAL
        - exports
        - process
        - Buffer
      # CLI often forwards to main commands using `import * as commands`
      import/no-namespace: 0

  # Benchmark files
  - files: [benchmarks/**/*.js]
    rules:
      # Often used to signify number of iterations
      no-magic-numbers: 0
